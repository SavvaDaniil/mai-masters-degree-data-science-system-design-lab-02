version: "1.0"

services:

  db:
    image: postgres:14
    container_name: db
    networks:
      - my_network
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mai_master_degree_systems_analysis
      #- POSTGRES_INITDB_ARGS='--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - ./volumes/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
      
  mongodb:
    image: mongo:5.0
    container_name: mongodb
    restart: on-failure
    networks:
      - my_network
    volumes:
      - ./volumes/mongodbdata:/data/db
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/mai_master_degree_system_analysis_lab --quiet

  redis-cache:
    container_name: redis-cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - my_network
  
  backend-python-fastapi:
    build:
      context: ./backend-python-fastapi
    container_name: backend-python-fastapi
    networks:
      - my_network
    ports:
      - 8092:8092
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./volumes/backend-python-fastapi:/app/logs.txt
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db/mai_master_degree_systems_analysis
      - DATABASE_MONGO_URL=mongodb://mongodb:27017/
      - DATABASE_REDIS_URL=redis://redis-cache:6379/0
  
  kafka-listener-python:
    build:
      context: ./kafka-listener-python
    container_name: kafka-listener-python
    networks:
      - my_network
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db/mai_master_degree_systems_analysis

  kafka1:
      image: 'bitnami/kafka:latest'
      container_name: kafka1
      ports:
      #   - "2181:2181"
         - "9092:9092"
      #   - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
        KAFKA_BROKER_ID: 1
        KAFKA_CFG_NODE_ID: 1
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - ./volumes/kafka1:/bitnami/kafka
      networks:
        - my_network

  kafka-ui:
      image: provectuslabs/kafka-ui:v0.4.0
      container_name: kafka_ui
      ports:
        - "8888:8080"
      environment:
        KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092"
        KAFKA_CLUSTERS_0_NAME: "kraft"
      networks:
        - my_network
  
  
  

networks:
  my_network:
volumes:
  postgres-data: